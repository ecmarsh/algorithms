/**
 * @lc id=389 lang=javascript
 *
 * [389] Find the Difference
 *
 * Given two strings s and t which consist of _only lowercase letters_.
 *
 * String t is generated by random shuffling string s and then
 * inserting one more letter at a random position.
 *
 * Find the letter that was added in `t`.
 *
 * @example
 * Input: s="abcd", t="baced"
 * Output: "e"
 * Explanation: "e" is the letter that was added to `t`.
 *
 */

/**
 * Brute force solution: store counts of characters in `s`,
 * then check `t` for different count of characters.
 *
 * Time: O(t) Note we could subtract differences in same loop
 *              and check at end, but same number of ops in worst case scenario.
 *              And we know that t is s+1 so O(t+t-1) = O(2t-1) = O(t).
 * Space: O(26) = O(1)
 *
 * @param {string} s
 * @param {string} t
 * @return {string}
 */
module.exports.brute = function oneLetterStringDiffHashTable( s, t ) {
  const set = Array( 26 ).fill( 0 );
  for ( let i = 0; i < s.length; i++ ) {
    set[s.charCodeAt( i )-97]++;
  }
  for ( let i = 0; i < t.length; i++ ) {
    const index = t.charCodeAt( i )-97;
    if ( set[index] === 0 ) {
      return t[i];
    }
    set[index]--;
  }
};

/**
 * Bit solution: every letter in s will appear in t, by checking both,
 * we know that occurences of each char in s will be even, so xor (^)
 * will cancel. The added character will occur just once, so we can use
 * that number to return the added character.
 *
 * Time: O(t)
 * Space: O(1), we'll need 8 bytes to store the number representing the set.
 *              Javascript uses 64 bit unsigned integers so 64 bits total.
 * @return {string}
 */
module.exports.bitset = function oneLetterStringDiffBitset( s, t ) {
  let set = 0;
  for ( let i = 0; i < s.length; i++ ) {
    set ^= s.charCodeAt( i );
    set ^= t.charCodeAt( i );
  }
  set ^= t.charCodeAt( t.length-1 );
  return String.fromCharCode( set );
};

